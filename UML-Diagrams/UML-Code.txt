@startuml

!theme plain
top to bottom direction
skinparam linetype ortho

class IDGenerator {
  + generateNewID(TableType): String
  - checkIfIDExists(int, String): boolean
  + formatID(int): String
}
class Item {
  + setName(String): void
  + setUnitPrice(double): void
  + submitNewItem(): void
  + submitDeleteItem(): void
  + setQtyInStock(double): void
  + getPreviousQuantityInStock(): double
  + getTotalValue(): double
  + setId(String): void
  + getQtyInStock(): double
  + getUnitPrice(): double
  + getName(): String
  - calculateTotalValue(): void
  + getId(): String
  + getPreviousTotalValue(): double
  + submitUpdatedItem(): void
}
class ItemController {
  + navigateHome(): void
  + submitNewItem(): void
  + initialize(): void
  + updateNewItemName(): void
  + updateNewItemPrice(): void
  + initializeNewItem(): void
  + updateNewItemAmount(): void
}
class ItemStorage {
  + addNewItem(Item): void
  + updateItem(Item): void
  + deleteItem(Item): void
  + readItems(): ArrayList<Item>
}
class Store {
  + main(String[]): void
  + start(Stage): void
}
class StoreController {
  + closeProgram(): void
  + navigateToAddNewItem(): void
  + navigateToViewItems(): void
  + navigateToTransactionReport(): void
  + exitProgram(int): void
}
class TimestampGenerator {
  + getCurrentTime(): String
  + getCurrentDayStart(): String
  + getCurrentDayEnd(): String
}
class Transaction {
  + setId(String): void
  + getQuantityRemaining(): double
  + getValueChange(): double
  + setQuantityRemaining(double): void
  + setDescription(String): void
  + getTransactionType(): TransactionType
  + setTransactionType(TransactionType): void
  + getQuantityChange(): double
  + getDescription(): String
  + setQuantityChange(double): void
  + setValueChange(double): void
  + generate(Item, TransactionType): void
  + setTimestamp(String): void
  + getTimestamp(): String
  + getId(): String
}
class TransactionController {
  - initializeTableView(String, String): void
  + navigateHome(): void
  + initialize(): void
}
class TransactionStorage {
  + readTransactions(String, String): ArrayList<Transaction>
  + writeNewTransaction(Transaction): void
}
enum TransactionType << enumeration >> {
  + values(): TransactionType[]
  + valueOf(String): TransactionType
}
class View {
  + navigateToViewItems(): void
  + navigateToAddNewItem(): void
  + initializeView(Stage): void
  + navigateToTransactionReport(): void
  + navigateToMainMenu(): void
}

Item                   -[#595959,dashed]->  ItemStorage
Item                   -[#595959,dashed]->  Transaction
Item                   -[#595959,dashed]->  TransactionType
ItemController         -[#595959,dashed]->  Item
ItemController         -[#595959,dashed]->  ItemStorage
ItemController         -[#595959,dashed]->  View
ItemStorage            -[#595959,dashed]->  Item
Store                  -[#000082,plain]-^  View
StoreController        -[#595959,dashed]->  View
Transaction            -[#595959,dashed]->  IDGenerator
Transaction            -[#595959,dashed]->  Item
Transaction            -[#595959,dashed]->  TimestampGenerator
Transaction            -[#595959,dashed]->  TransactionStorage
Transaction            -[#595959,dashed]->  TransactionType
TransactionController  -[#595959,dashed]->  TimestampGenerator
TransactionController  -[#595959,dashed]->  Transaction
TransactionController  -[#595959,dashed]->  TransactionStorage
TransactionController  -[#595959,dashed]->  View
TransactionStorage     -[#595959,dashed]->  Transaction
TransactionStorage     -[#595959,dashed]->  TransactionType
@enduml
